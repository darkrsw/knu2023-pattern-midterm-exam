from app_analyzer import collectAccessMapFromPath

test_input_path = "./commons-lang/"
test_input_path2 = "./viritin/"
test_input_path3 = "./orika"
test_input_path4 = "./randoop"
test_input_path5 = "./lightcouch"


def test5_lightcouch_with_answer2():
    expected = {'Page': {'isHasPrevious[]': {'isHasPrevious'}, 'isHasNext[]': {'isHasNext'}, 'getResultList[]': {'resultList'}, 'getTotalResults[]': {'totalResults'}, 'getResultFrom[]': {'resultFrom'}, 'getResultTo[]': {'resultTo'}, 'getPageNumber[]': {'pageNumber'}, 'getNextParam[]': {'nextParam'}, 'getPreviousParam[]': {'previousParam'}, "setHasPrevious['boolean']": {'isHasPrevious'}, "setHasNext['boolean']": {'isHasNext'}, "setResultList['List']": {'resultList'}, "setTotalResults['long']": {'totalResults'}, "setResultFrom['int']": {'resultFrom'}, "setResultTo['int']": {'resultTo'}, "setPageNumber['int']": {'pageNumber'}, "setNextParam['String']": {'nextParam'}, "setPreviousParam['String']": {'previousParam'}}, 'DocumentConflictException': {"DocumentConflictException['String']": set(), "DocumentConflictException['Throwable']": set(), "DocumentConflictException['String', 'Throwable']": set()}, 'Response': {'getId[]': {'id'}, 'getRev[]': {'rev'}, 'getError[]': {'error'}, 'getReason[]': {'reason'}, 'toString[]': {'rev', 'id'}}, 'Replicator': {'save[]': {'userCtxName', 'dbURI', 'dbc', 'replicatorDoc', 'userCtxRoles'}, 'find[]': {'dbURI', 'dbc', 'replicatorDoc'}, 'findAll[]': {'dbURI', 'dbc'}, 'remove[]': {'dbURI', 'dbc', 'replicatorDoc'}, "source['String']": {'replicatorDoc'}, "target['String']": {'replicatorDoc'}, "continuous['boolean']": {'replicatorDoc'}, "filter['String']": {'replicatorDoc'}, "queryParams['String']": {'dbc', 'replicatorDoc'}, "queryParams['Map']": {'dbc', 'replicatorDoc'}, "docIds['String']": {'replicatorDoc'}, "proxy['String']": {'replicatorDoc'}, "createTarget['Boolean']": {'replicatorDoc'}, "replicatorDB['String']": {'dbURI', 'dbc', 'replicatorDB'}, "replicatorDocId['String']": {'replicatorDoc'}, "replicatorDocRev['String']": {'replicatorDoc'}, "workerProcesses['int']": {'replicatorDoc'}, "workerBatchSize['int']": {'replicatorDoc'}, "httpConnections['int']": {'replicatorDoc'}, "connectionTimeout['long']": {'replicatorDoc'}, "retriesPerRequest['int']": {'replicatorDoc'}, "userCtxName['String']": {'userCtxName'}, "userCtxRoles['String']": {'userCtxRoles'}, "sinceSeq['String']": {'replicatorDoc'}, "Replicator['CouchDbClientBase']": {'dbURI', 'dbc', 'replicatorDoc', 'replicatorDB', 'userCtxRoles'}}, 'Changes': {'continuousChanges[]': {'httpGet', 'dbc', 'uriBuilder'}, 'hasNext[]': set(), 'next[]': set(), 'stop[]': {'stop'}, 'getChanges[]': {'dbc', 'uriBuilder'}, "since['String']": {'uriBuilder'}, "limit['int']": {'uriBuilder'}, "heartBeat['long']": {'uriBuilder'}, "timeout['long']": {'uriBuilder'}, "filter['String']": {'uriBuilder'}, "includeDocs['boolean']": {'uriBuilder'}, "style['String']": {'uriBuilder'}, 'readNextRow[]': {'stop', 'gson'}, 'getReader[]': {'reader'}, "setReader['BufferedReader']": {'reader'}, 'getNextRow[]': {'nextRow'}, "setNextRow['Row']": {'nextRow'}, 'terminate[]': {'httpGet'}, "Changes['CouchDbClientBase']": {'gson', 'dbc', 'uriBuilder'}}, 'CouchDbContext': {"deleteDB['String', 'String']": {'dbc'}, "createDB['String']": {'dbc', 'log'}, 'getAllDbs[]': {'dbc'}, 'info[]': {'dbc'}, 'serverVersion[]': {'dbc'}, 'compact[]': {'dbc'}, 'ensureFullCommit[]': {'dbc'}, "uuids['long']": {'dbc'}, "CouchDbContext['CouchDbClientBase', 'CouchDbProperties']": {'dbc'}}, 'CouchDbConfig': {'readProperties[]': {'dbProperties', 'properties'}, 'getProperties[]': {'dbProperties'}, "getProperty['String', 'boolean']": {'configFile', 'log', 'properties'}, "getPropertyAsInt['String', 'boolean']": set(), 'CouchDbConfig[]': {'DEFAULT_FILE'}, "CouchDbConfig['String']": {'configFile', 'log', 'properties'}, "CouchDbConfig['CouchDbProperties']": {'dbProperties'}}, 'Document': {'getId[]': {'id'}, 'getRevision[]': {'revision'}, 'getAttachments[]': {'attachments'}, "setId['String']": {'id'}, "setRevision['String']": {'revision'}, "setAttachments['Map']": {'attachments'}, "addAttachment['String', 'Attachment']": {'attachments'}, 'hashCode[]': {'id'}, "equals['Object']": {'id'}, 'Document[]': set(), "Document['Document']": set()}, 'ReplicatorDocument': {'getSource[]': {'source'}, 'getTarget[]': {'target'}, 'getContinuous[]': {'continuous'}, 'getFilter[]': {'filter'}, 'getQueryParams[]': {'queryParams'}, 'getDocIds[]': {'docIds'}, 'getProxy[]': {'proxy'}, 'getCreateTarget[]': {'createTarget'}, 'getReplicationId[]': {'replicationId'}, 'getReplicationState[]': {'replicationState'}, 'getReplicationStateTime[]': {'replicationStateTime'}, 'getUserCtx[]': {'userCtx'}, 'getWorkerProcesses[]': {'workerProcesses'}, 'getWorkerBatchSize[]': {'workerBatchSize'}, 'getHttpConnections[]': {'httpConnections'}, 'getConnectionTimeout[]': {'connectionTimeout'}, 'getRetriesPerRequest[]': {'retriesPerRequest'}, "setSource['String']": {'source'}, "setTarget['String']": {'target'}, "setContinuous['Boolean']": {'continuous'}, "setFilter['String']": {'filter'}, "setQueryParams['JsonObject']": {'queryParams'}, "setDocIds['String']": {'docIds'}, "setProxy['String']": {'proxy'}, "setCreateTarget['Boolean']": {'createTarget'}, "setReplicationId['String']": {'replicationId'}, "setReplicationState['String']": {'replicationState'}, "setReplicationStateTime['String']": {'replicationStateTime'}, "setUserCtx['UserCtx']": {'userCtx'}, "setWorkerProcesses['Integer']": {'workerProcesses'}, "setWorkerBatchSize['Integer']": {'workerBatchSize'}, "setHttpConnections['Integer']": {'httpConnections'}, "setConnectionTimeout['Long']": {'connectionTimeout'}, "setRetriesPerRequest['Integer']": {'retriesPerRequest'}, 'getSinceSeq[]': {'sinceSeq'}, "setSinceSeq['String']": {'sinceSeq'}}, 'UserCtx': {'getName[]': {'name'}, 'getRoles[]': {'roles'}, "setName['String']": {'name'}, "setRoles['String']": {'roles'}}, 'DesignDocument': {'getLanguage[]': {'language'}, 'getViews[]': {'views'}, 'getValidateDocUpdate[]': {'validateDocUpdate'}, 'getRewrites[]': {'rewrites'}, 'getFulltext[]': {'fulltext'}, 'getIndexes[]': {'indexes'}, 'getFilters[]': {'filters'}, 'getShows[]': {'shows'}, 'getLists[]': {'lists'}, 'getUpdates[]': {'updates'}, "setLanguage['String']": {'language'}, "setViews['Map']": {'views'}, "setValidateDocUpdate['String']": {'validateDocUpdate'}, "setRewrites['JsonArray']": {'rewrites'}, "setFulltext['JsonObject']": {'fulltext'}, "setIndexes['JsonObject']": {'indexes'}, "setFilters['Map']": {'filters'}, "setShows['Map']": {'shows'}, "setLists['Map']": {'lists'}, "setUpdates['Map']": {'updates'}, 'hashCode[]': {'validateDocUpdate', 'shows', 'language', 'rewrites', 'filters', 'lists', 'fulltext', 'updates', 'views'}, "equals['Object']": {'validateDocUpdate', 'shows', 'language', 'rewrites', 'filters', 'lists', 'fulltext', 'updates', 'views'}}, 'MapReduce': {'getMap[]': {'map'}, 'getReduce[]': {'reduce'}, "setMap['String']": {'map'}, "setReduce['String']": {'reduce'}, 'hashCode[]': {'map', 'reduce'}, "equals['Object']": {'map', 'reduce'}}, 'NoDocumentException': {"NoDocumentException['String']": set(), "NoDocumentException['Throwable']": set(), "NoDocumentException['String', 'Throwable']": set()}, 'Params': {'revsInfo[]': {'params'}, 'attachments[]': {'params'}, 'revisions[]': {'params'}, "rev['String']": {'params'}, 'conflicts[]': {'params'}, 'localSeq[]': {'params'}, "addParam['String', 'String']": {'params'}, 'getParams[]': {'params'}}, 'CouchDbClientAndroid': {"createHttpClient['CouchDbProperties']": set(), 'createContext[]': set(), 'shutdown[]': set(), "createRegistry['CouchDbProperties']": set(), "registerInterceptors['DefaultHttpClient']": set(), 'CouchDbClientAndroid[]': set(), "CouchDbClientAndroid['String']": set(), "CouchDbClientAndroid['String', 'boolean', 'String', 'String', 'int', 'String', 'String']": set(), "CouchDbClientAndroid['CouchDbProperties']": set()}, 'MySSLSocketFactory': {"createSocket['Socket', 'String', 'int', 'boolean']": {'sslContext'}, 'createSocket[]': {'sslContext'}, "MySSLSocketFactory['KeyStore']": {'sslContext'}}, 'PreemptiveAuthInterceptor': {"process['HttpRequest', 'HttpContext']": set()}, 'CouchDbProperties': {'getDbName[]': {'dbName'}, 'isCreateDbIfNotExist[]': {'createDbIfNotExist'}, 'getProtocol[]': {'protocol'}, 'getHost[]': {'host'}, 'getPath[]': {'path'}, 'getPort[]': {'port'}, 'getUsername[]': {'username'}, 'getPassword[]': {'password'}, 'getSocketTimeout[]': {'socketTimeout'}, 'getConnectionTimeout[]': {'connectionTimeout'}, 'getMaxConnections[]': {'maxConnections'}, 'getProxyHost[]': {'proxyHost'}, 'getProxyPort[]': {'proxyPort'}, "setDbName['String']": {'dbName'}, "setCreateDbIfNotExist['boolean']": {'createDbIfNotExist'}, "setProtocol['String']": {'protocol'}, "setHost['String']": {'host'}, "setPath['String']": {'path'}, "setPort['int']": {'port'}, "setUsername['String']": {'username'}, "setPassword['String']": {'password'}, "setSocketTimeout['int']": {'socketTimeout'}, "setConnectionTimeout['int']": {'connectionTimeout'}, "setMaxConnections['int']": {'maxConnections'}, "setProxyHost['String']": {'proxyHost'}, "setProxyPort['int']": {'proxyPort'}, 'clearPassword[]': set(), 'CouchDbProperties[]': set(), "CouchDbProperties['String', 'boolean', 'String', 'String', 'int', 'String', 'String']": {'host', 'port', 'username', 'dbName', 'protocol', 'password', 'createDbIfNotExist'}}, 'ViewResult': {'getTotalRows[]': {'totalRows'}, 'getUpdateSeq[]': {'updateSeq'}, 'getOffset[]': {'offset'}, 'getRows[]': {'rows'}, "setTotalRows['long']": {'totalRows'}, "setUpdateSeq['String']": {'updateSeq'}, "setOffset['int']": {'offset'}, "setRows['List']": {'rows'}, 'toString[]': {'totalRows', 'offset', 'updateSeq', 'rows'}}, 'Rows': {'getId[]': {'id'}, 'getKey[]': {'key'}, 'getValue[]': {'value'}, 'getDoc[]': {'doc'}, "setId['String']": {'id'}, "setKey['K']": {'key'}, "setValue['V']": {'value'}, "setDoc['T']": {'doc'}, 'toString[]': {'id'}}, 'View': {'queryForStream[]': {'allDocsKeys', 'dbc', 'uriBuilder'}, "query['Class']": {'gson', 'includeDocs'}, "queryView['Class', 'Class', 'Class']": {'gson', 'includeDocs'}, 'queryForString[]': set(), 'queryForInt[]': set(), 'queryForLong[]': set(), 'queryForBoolean[]': set(), "queryValue['Class']": {'gson'}, "queryPage['int', 'String', 'Class']": {'CURRENT_START_KEY_DOC_ID', 'startKey', 'startKeyDocId', 'CURRENT_START_KEY', 'START_KEY_DOC_ID', 'ACTION', 'START_KEY', 'CURRENT_KEYS', 'log', 'PREVIOUS'}, "queryNextPage['int', 'String', 'String', 'String', 'String', 'Class']": {'CURRENT_START_KEY_DOC_ID', 'startKey', 'startKeyDocId', 'CURRENT_START_KEY', 'START_KEY_DOC_ID', 'NEXT', 'ACTION', 'START_KEY', 'CURRENT_KEYS', 'PREVIOUS'}, "queryPreviousPage['int', 'String', 'String', 'String', 'String', 'Class']": {'CURRENT_START_KEY_DOC_ID', 'CURRENT_START_KEY', 'START_KEY_DOC_ID', 'NEXT', 'ACTION', 'START_KEY', 'CURRENT_KEYS', 'PREVIOUS'}, "key['Object']": {'key', 'uriBuilder'}, "startKey['Object']": {'startKey', 'uriBuilder'}, "startKeyDocId['String']": {'startKeyDocId', 'uriBuilder'}, "endKey['Object']": {'endKey', 'uriBuilder'}, "endKeyDocId['String']": {'endKeyDocId', 'uriBuilder'}, "limit['Integer']": {'limit', 'uriBuilder'}, "stale['String']": {'stale', 'uriBuilder'}, "descending['Boolean']": {'gson', 'descending', 'uriBuilder'}, "skip['Integer']": {'skip', 'uriBuilder'}, "group['Boolean']": {'group', 'uriBuilder'}, "groupLevel['Integer']": {'groupLevel', 'uriBuilder'}, "reduce['Boolean']": {'uriBuilder', 'reduce'}, "includeDocs['Boolean']": {'includeDocs', 'uriBuilder'}, "inclusiveEnd['Boolean']": {'inclusiveEnd', 'uriBuilder'}, "updateSeq['Boolean']": {'updateSeq', 'uriBuilder'}, "keys['List']": {'allDocsKeys', 'gson'}, "getKeyAsJson['Object']": {'key', 'gson'}, "View['CouchDbClientBase', 'String']": {'gson', 'dbc', 'uriBuilder'}}, 'CouchDbInfo': {'getDbName[]': {'dbName'}, 'getDocCount[]': {'docCount'}, 'getDocDelCount[]': {'docDelCount'}, 'getUpdateSeq[]': {'updateSeq'}, 'getPurgeSeq[]': {'purgeSeq'}, 'isCompactRunning[]': {'compactRunning'}, 'getDiskSize[]': {'diskSize'}, 'getInstanceStartTime[]': {'instanceStartTime'}, 'getDiskFormatVersion[]': {'diskFormatVersion'}, 'toString[]': {'instanceStartTime', 'dbName', 'docDelCount', 'compactRunning', 'diskSize', 'purgeSeq', 'docCount', 'updateSeq', 'diskFormatVersion'}}, 'Attachment': {'getData[]': {'data'}, 'getContentType[]': {'contentType'}, 'getRevpos[]': {'revpos'}, 'getDigest[]': {'digest'}, 'getLength[]': {'length'}, 'isStub[]': {'stub'}, "setContentType['String']": {'contentType'}, "setData['String']": {'data'}, 'Attachment[]': set(), "Attachment['String', 'String']": {'data', 'contentType'}}, 'ReplicationResult': {'isOk[]': {'ok'}, 'getSessionId[]': {'sessionId'}, 'getSourceLastSeq[]': {'sourceLastSeq'}, 'getLocalId[]': {'localId'}, 'getHistories[]': {'histories'}}, 'ReplicationHistory': {'getSessionId[]': {'sessionId'}, 'getStartTime[]': {'startTime'}, 'getEndTime[]': {'endTime'}, 'getStartLastSeq[]': {'startLastSeq'}, 'getEndLastSeq[]': {'endLastSeq'}, 'getRecordedSeq[]': {'recordedSeq'}, 'getMissingChecked[]': {'missingChecked'}, 'getMissingFound[]': {'missingFound'}, 'getDocsRead[]': {'docsRead'}, 'getDocsWritten[]': {'docsWritten'}, 'getDocWriteFailures[]': {'docWriteFailures'}}, 'CouchDbDesign': {"synchronizeWithDb['DesignDocument']": {'dbc'}, 'synchronizeAllWithDb[]': set(), "getFromDb['String']": {'dbc'}, "getFromDb['String', 'String']": {'dbc'}, 'getAllFromDesk[]': {'DESIGN_DOCS_DIR'}, "getFromDesk['String']": {'REWRITES', 'FILTERS', 'DESIGN_PREFIX', 'LISTS', 'SHOWS', 'DESIGN_DOCS_DIR', 'UPDATES', 'VALIDATE_DOC', 'REDUCE_JS', 'VIEWS', 'dbc', 'JAVASCRIPT', 'FULLTEXT', 'MAP_JS', 'INDEXES'}, "populateMap['String', 'List', 'String']": set(), "readContent['List', 'String', 'String']": set(), "CouchDbDesign['CouchDbClientBase']": {'dbc'}}, 'CouchDbClient': {"createHttpClient['CouchDbProperties']": set(), 'createContext[]': set(), "createConnectionManager['CouchDbProperties', 'Registry']": set(), "createRegistry['CouchDbProperties']": set(), "registerInterceptors['HttpClientBuilder']": set(), 'shutdown[]': set(), 'close[]': set(), 'CouchDbClient[]': set(), "CouchDbClient['String']": set(), "CouchDbClient['String', 'boolean', 'String', 'String', 'int', 'String', 'String']": set(), "CouchDbClient['CouchDbProperties']": set()}, 'Replication': {'trigger[]': {'target', 'source', 'dbc', 'log'}, "source['String']": {'source'}, "target['String']": {'target'}, "continuous['Boolean']": {'continuous'}, "filter['String']": {'filter'}, "queryParams['String']": {'dbc', 'queryParams'}, "queryParams['Map']": {'dbc', 'queryParams'}, "docIds['String']": {'docIds'}, "proxy['String']": {'proxy'}, "cancel['Boolean']": {'cancel'}, "createTarget['Boolean']": {'createTarget'}, "sinceSeq['String']": {'sinceSeq'}, "targetOauth['String', 'String', 'String', 'String']": {'consumerKey', 'token', 'consumerSecret', 'targetOauth', 'tokenSecret'}, 'createJson[]': {'consumerKey', 'proxy', 'consumerSecret', 'docIds', 'token', 'sinceSeq', 'targetOauth', 'target', 'source', 'dbc', 'filter', 'queryParams', 'tokenSecret', 'cancel', 'createTarget', 'continuous'}, "addProperty['JsonObject', 'String', 'Object']": set(), "Replication['CouchDbClientBase']": {'dbc'}}, 'CouchDbClientBase': {"createHttpClient['CouchDbProperties']": set(), 'createContext[]': set(), 'shutdown[]': set(), 'context[]': {'context'}, 'design[]': {'design'}, "view['String']": set(), 'replication[]': set(), 'replicator[]': set(), 'changes[]': set(), "find['Class', 'String']": set(), "find['Class', 'String', 'Params']": set(), "find['Class', 'String', 'String']": set(), "findAny['Class', 'String']": set(), "find['String']": set(), "find['String', 'String']": set(), "findDocs['String', 'Class']": {'gson'}, "contains['String']": set(), "save['Object']": set(), "post['Object']": set(), "batch['Object']": set(), "update['Object']": set(), "remove['Object']": set(), "remove['String', 'String']": set(), "bulk['List', 'boolean']": set(), "saveAttachment['InputStream', 'String', 'String']": set(), "saveAttachment['InputStream', 'String', 'String', 'String', 'String']": set(), "invokeUpdateHandler['String', 'String', 'Params']": set(), "executeRequest['HttpRequestBase']": {'host', 'httpClient'}, 'syncDesignDocsWithDb[]': set(), "setGsonBuilder['GsonBuilder']": {'gson'}, 'getBaseUri[]': {'baseURI'}, 'getDBUri[]': {'dbURI'}, 'getGson[]': {'gson'}, "get['HttpGet']": set(), "get['URI']": set(), "get['URI', 'Class']": set(), "head['URI']": set(), "put['URI', 'Object', 'boolean']": set(), "put['URI', 'InputStream', 'String']": set(), "post['URI', 'String']": set(), "delete['URI']": set(), "validate['HttpResponse']": set(), "getResponse['HttpResponse']": set(), "getResponseList['HttpResponse']": set(), "setEntity['HttpEntityEnclosingRequestBase', 'String']": set(), "initGson['GsonBuilder']": set(), 'CouchDbClientBase[]': set(), "CouchDbClientBase['CouchDbConfig']": {'host', 'gson', 'baseURI', 'httpClient', 'context', 'design', 'dbURI'}}, 'CouchDbUtil': {"assertNotEmpty['Object', 'String']": set(), "assertNull['Object', 'String']": set(), 'generateUUID[]': set(), "JsonToObject['Gson', 'JsonElement', 'String', 'Class']": set(), "getAsString['JsonObject', 'String']": set(), "getAsLong['JsonObject', 'String']": set(), "getAsInt['JsonObject', 'String']": set(), "listResources['String']": {'SPRING_BOOT_DIR'}, "readFile['String']": {'LINE_SEP'}, "getStream['HttpResponse']": set(), "removeExtension['String']": set(), "streamToString['InputStream']": set(), "close['HttpResponse']": set(), "close['Closeable']": set(), 'CouchDbUtil[]': set()}, 'CouchDbException': {"CouchDbException['String']": set(), "CouchDbException['Throwable']": set(), "CouchDbException['String', 'Throwable']": set()}, 'URIBuilder': {'buildUri[]': set(), "buildUri['URI']": set(), "scheme['String']": {'scheme'}, "host['String']": {'host'}, "port['int']": {'port'}, "path['String']": {'path'}, "pathEncoded['String']": {'path'}, "query['String', 'Object']": {'params'}, "query['Params']": {'params'}, 'build[]': {'host', 'port', 'params', 'path', 'scheme'}}, 'ChangesResult': {'getResults[]': {'results'}, 'getLastSeq[]': {'lastSeq'}}, 'Row': {'getSeq[]': {'seq'}, 'getId[]': {'id'}, 'getChanges[]': {'changes'}, 'isDeleted[]': {'deleted'}, 'getDoc[]': {'doc'}}, 'Rev': {'getRev[]': {'rev'}}}
    answer = collectAccessMapFromPath(test_input_path5)
    assert list(expected.values())[0].pop("setResultTo['int']") == list(answer.values())[0].pop("setResultTo['int']")

def test4_randoop_with_answer2():
    expected = {'NotExecuted': {'create[]': {'notExecutedSingleton'}, 'toString[]': set(), 'getExecutionTimeNanos[]': set(), 'NotExecuted[]': set()}, 'SubTypeSet': {'mark[]': {'supportsCheckpoints', 'types', 'subTypes'}, 'undoLastStep[]': {'supportsCheckpoints', 'types', 'subTypes'}, "add['Type']": {'types', 'subTypes'}, "addQueryType['Type']": {'types', 'subTypes'}, "getMatches['Type']": {'subTypes'}, 'size[]': {'types'}, "SubTypeSet['boolean']": {'supportsCheckpoints', 'types', 'subTypes'}}, 'MultiVisitor': {"createMultiVisitor['List']": {'visitors'}, "initialize['ExecutableSequence']": {'visitors'}, "visitAfterStatement['ExecutableSequence', 'int']": {'visitors'}, "visitBeforeStatement['ExecutableSequence', 'int']": {'visitors'}, "visitAfterSequence['ExecutableSequence']": {'visitors'}, 'MultiVisitor[]': set(), "MultiVisitor['List']": {'visitors'}}, 'ReplayFailureException': {'getDecoration[]': {'decoration'}, "ReplayFailureException['String', 'Check']": {'decoration'}}, 'NormalExecution': {'getRuntimeValue[]': {'result'}, 'toString[]': {'result'}, "NormalExecution['Object', 'long']": {'result'}}, 'ExceptionalExecution': {'getException[]': {'exception'}, 'toString[]': {'exception'}, "ExceptionalExecution['Throwable', 'long']": {'exception'}}, 'ExecutionOutcome': {'getExecutionTimeNanos[]': {'executionTimeNanos'}, "set_output['String']": {'output'}, 'get_output[]': {'output'}, "ExecutionOutcome['long']": {'executionTimeNanos'}}, 'Globals': {'getRandoopVersion[]': {'RANDOOP_VERSION'}, 'getClassPath[]': set()}, 'NullOutputStream': {"write['int']": set()}, 'DummyVisitor': {"initialize['ExecutableSequence']": set(), "visitBeforeStatement['ExecutableSequence', 'int']": set(), "visitAfterStatement['ExecutableSequence', 'int']": set(), "visitAfterSequence['ExecutableSequence']": set()}}
    answer = collectAccessMapFromPath(test_input_path4)
    assert expected.get('NotExecuted', {}).items() == answer.get('NotExecuted', {}).items()

def test3_orika_with_answer2():
    expected = {'MapperBase': {"mapAtoB['A', 'B', 'MappingContext']": set(), "mapBtoA['B', 'A', 'MappingContext']": set(), "setMapperFacade['MapperFacade']": {'mapperFacade'}, 'getAType[]': set(), 'getBType[]': set(), "setUsedMappers['Mapper']": set(), 'throwShouldNotCalledCustomMapper[]': set()}, 'MapperBaseAdapter': {"mapAtoB['A', 'B', 'MappingContext']": {'delegate'}, "mapBtoA['B', 'A', 'MappingContext']": {'delegate'}, "setMapperFacade['MapperFacade']": {'delegate'}, "MapperBaseAdapter['MapperBase']": {'delegate'}}, 'OrikaSystemProperties': {'OrikaSystemProperties[]': set()}, 'MappingContext': {"getConcreteClass['Type', 'Type']": {'mapping'}, "registerConcreteClass['Type', 'Type']": {'mapping'}, "cacheMappedObject['S', 'D']": {'cache'}, "cacheMappedObject['S', 'Type', 'D']": {'cache'}, "isAlreadyMapped['S', 'Type']": {'cache'}, "getMappedObject['Object', 'Type']": {'cache'}, 'MappingContext[]': {'mapping', 'cache'}}, 'CacheKey': {'hashCode[]': {'destinationType', 'sourceObject'}, "equals['Object']": {'destinationType', 'sourceObject'}, "CacheKey['Object', 'Type']": {'destinationType', 'sourceObject'}}, 'ConverterException': {}, 'MappingException': {'getLocalizedMessage[]': {'destinationProperty', 'sourceClass', 'destinationType', 'sourceType', 'sourceProperty'}, 'getSourceProperty[]': {'sourceProperty'}, "setSourceProperty['Property']": {'sourceProperty'}, 'getDestinationProperty[]': {'destinationProperty'}, "setDestinationProperty['Property']": {'destinationProperty'}, 'getSourceType[]': {'sourceType'}, "setSourceType['Type']": {'sourceType'}, 'getDestinationType[]': {'destinationType'}, "setDestinationType['Type']": {'destinationType'}, 'getSourceClass[]': {'sourceClass'}, "setSourceClass['Class']": {'sourceClass'}, "MappingException['Throwable']": set(), "MappingException['String']": set(), "MappingException['String', 'Throwable']": set()}, 'MapEntry': {'getKey[]': {'key'}, 'getValue[]': {'value'}, "setKey['K']": {'key'}, "setValue['V']": {'value'}, "concreteEntryType['Type']": set(), "entryType['Type']": set(), "entrySet['Map']": set(), 'MapEntry[]': set(), "MapEntry['K', 'V']": {'value', 'key'}, "MapEntry['Entry']": {'value', 'key'}}, 'MapEntrySet': {'size[]': {'delegate'}, 'isEmpty[]': {'delegate'}, "contains['Object']": set(), 'iterator[]': {'delegate'}, 'toArray[]': set(), "toArray['T']": set(), "add['MapEntry']": set(), "remove['Object']": set(), "containsAll['Collection']": set(), "addAll['Collection']": set(), "retainAll['Collection']": set(), "removeAll['Collection']": set(), 'clear[]': set(), "MapEntrySet['Set']": {'delegate'}}, 'MapEntryIterator': {'hasNext[]': {'delegate'}, 'next[]': {'delegate'}, 'remove[]': set(), "MapEntryIterator['Iterator']": {'delegate'}}, 'DefaultFieldMappingConverter': {"suggestMappedField['String', 'Type']": {'delegate'}, "DefaultFieldMappingConverter['MappingHint']": {'delegate'}}, 'CustomConverter': {"canConvert['Type', 'Type']": {'destinationType', 'sourceType'}, "setMapperFacade['MapperFacade']": {'mapperFacade'}, 'toString[]': {'destinationType', 'sourceType'}, 'CustomConverter[]': {'destinationType', 'sourceType'}}, 'CustomMapper': {"mapAtoB['A', 'B', 'MappingContext']": set(), "mapBtoA['B', 'A', 'MappingContext']": set(), "setMapperFacade['MapperFacade']": {'mapperFacade'}, 'getAType[]': {'aType'}, 'getBType[]': {'bType'}, "setUsedMappers['Mapper']": set(), "setUsedTypes['Type']": set(), 'throwShouldNotCalledCustomMapper[]': set(), 'CustomMapper[]': {'aType', 'bType'}}}
    answer = collectAccessMapFromPath(test_input_path3)

    assert len(answer) == len(expected)
    assert expected.get('DefaultFieldMappingConverter', {}) == answer.get('DefaultFieldMappingConverter', {})

def test2_viritin_with_answer2():
    expected = {'LazyList': {"findPageFromCache['int']": {'pages', 'pageIndex'}, 'loadPreviousPage[]': {'maxPages', 'pageSize', 'pages', 'pageIndex'}, 'loadNextPage[]': {'maxPages', 'pageSize', 'pages', 'pageIndex'}, 'getMaxPages[]': {'maxPages'}, "setMaxPages['int']": {'maxPages'}, "get['int']": {'maxPages', 'pageSize', 'pages', 'pageIndex'}, "initCacheFormPage['int']": {'pages', 'pageSize', 'pageIndex'}, "findEntities['int']": {'pageProvider'}, 'size[]': {'cachedSize', 'countProvider'}, 'getIndexCache[]': {'indexCache'}, "indexOf['Object']": {'pages', 'pageSize', 'pageIndex'}, "contains['Object']": {'pages'}, "subList['int', 'int']": {'maxPages', 'pageSize'}, 'iterator[]': set(), 'reset[]': {'indexCache', 'cachedSize', 'pages', 'pageIndex'}, "LazyList['CountProvider', 'int']": {'pageSize', 'countProvider'}, "LazyList['EntityProvider']": {'DEFAULT_PAGE_SIZE'}, "LazyList['EntityProvider', 'int']": {'pageProvider', 'pageSize', 'countProvider'}, "LazyList['PagingProvider', 'CountProvider']": {'pageProvider', 'DEFAULT_PAGE_SIZE', 'countProvider'}, "LazyList['PagingProvider', 'CountProvider', 'int']": {'pageProvider', 'pageSize', 'countProvider'}}, 'MSize': {'getWidth[]': {'width'}, 'getWidthUnit[]': {'widthUnit'}, 'getHeight[]': {'height'}, 'getHeightUnit[]': {'heightUnit'}, "width['float', 'Sizeable']": {'width', 'widthUnit'}, "width['String']": {'width'}, "height['float', 'Sizeable']": {'heightUnit', 'height'}, "height['String']": {'height'}, "size['float', 'Sizeable', 'float', 'Sizeable']": {'width', 'height', 'heightUnit', 'widthUnit'}, "size['String', 'String']": {'width', 'height'}, "MSize['float', 'Sizeable', 'float', 'Sizeable']": {'width', 'height', 'heightUnit', 'widthUnit'}}}
    answer = collectAccessMapFromPath(test_input_path2)
    assert sorted(expected.get('LazyList', {}).get('loadNextPage[]')) == sorted(answer.get('LazyList', {}).get('loadNextPage[]'))

def test1_commonslang_with_answer2():
    expected = {'SystemUtils': {"getEnvironmentVariable['String', 'String']": set(), 'getHostName[]': {'IS_OS_WINDOWS'}, 'getJavaHome[]': set(), 'getJavaIoTmpDir[]': set(), "getJavaVersionMatches['String']": {'JAVA_SPECIFICATION_VERSION'}, "getOsMatches['String', 'String']": {'OS_NAME', 'OS_VERSION'}, "getOsMatchesName['String']": {'OS_NAME'}, 'getUserDir[]': set(), 'getUserHome[]': set(), 'getUserName[]': set(), "getUserName['String']": {'USER_NAME'}, 'isJavaAwtHeadless[]': {'JAVA_AWT_HEADLESS'}, "isJavaVersionAtLeast['JavaVersion']": {'JAVA_SPECIFICATION_VERSION_AS_ENUM'}, "isJavaVersionAtMost['JavaVersion']": {'JAVA_SPECIFICATION_VERSION_AS_ENUM'}, "isJavaVersionMatch['String', 'String']": set(), "isOSMatch['String', 'String', 'String', 'String']": set(), "isOSNameMatch['String', 'String']": set(), "isOSVersionMatch['String', 'String']": set(), 'SystemUtils[]': set()}, 'RandomStringUtils': {'random[]': set(), "random['int']": set(), "random['int', 'boolean', 'boolean']": set(), "random['int', 'char']": set(), "random['int', 'int', 'int', 'boolean', 'boolean']": set(), "random['int', 'int', 'int', 'boolean', 'boolean', 'char']": set(), "random['int', 'int', 'int', 'boolean', 'boolean', 'char', 'Random']": set(), "random['int', 'String']": set(), "randomAlphabetic['int']": set(), "randomAlphabetic['int', 'int']": set(), "randomAlphanumeric['int']": set(), "randomAlphanumeric['int', 'int']": set(), "randomAscii['int']": set(), "randomAscii['int', 'int']": set(), "randomGraph['int']": set(), "randomGraph['int', 'int']": set(), "randomNumeric['int']": set(), "randomNumeric['int', 'int']": set(), "randomPrint['int']": set(), "randomPrint['int', 'int']": set(), 'RandomStringUtils[]': set()}, 'ClassLoaderUtils': {'getSystemURLs[]': set(), 'getThreadURLs[]': set(), "getURLs['ClassLoader']": {'EMPTY_URL_ARRAY'}, "toString['ClassLoader']": set(), "toString['URLClassLoader']": set()}, 'CharSequenceUtils': {"checkLaterThan1['CharSequence', 'CharSequence', 'int', 'int']": set(), "indexOf['CharSequence', 'CharSequence', 'int']": set(), "indexOf['CharSequence', 'int', 'int']": {'NOT_FOUND'}, "lastIndexOf['CharSequence', 'CharSequence', 'int']": {'TO_STRING_LIMIT', 'NOT_FOUND'}, "lastIndexOf['CharSequence', 'int', 'int']": {'NOT_FOUND'}, "regionMatches['CharSequence', 'boolean', 'int', 'CharSequence', 'int', 'int']": set(), "subSequence['CharSequence', 'int']": set(), "toCharArray['CharSequence']": set(), 'CharSequenceUtils[]': set()}, 'ArchUtils': {'init[]': set(), 'init_Aarch_64Bit[]': set(), 'init_X86_32Bit[]': set(), 'init_X86_64Bit[]': set(), 'init_IA64_32Bit[]': set(), 'init_IA64_64Bit[]': set(), 'init_PPC_32Bit[]': set(), 'init_PPC_64Bit[]': set(), "addProcessor['String', 'Processor']": {'ARCH_TO_PROCESSOR'}, "addProcessors['Processor', 'String']": set(), 'getProcessor[]': set(), "getProcessor['String']": {'ARCH_TO_PROCESSOR'}}, 'CharUtils': {"toCharacterObject['char']": set(), "toCharacterObject['String']": set(), "toChar['Character']": set(), "toChar['Character', 'char']": set(), "toChar['String']": set(), "toChar['String', 'char']": set(), "toIntValue['char']": set(), "toIntValue['char', 'int']": set(), "toIntValue['Character']": set(), "toIntValue['Character', 'int']": set(), "toString['char']": {'CHAR_STRING_ARRAY'}, "toString['Character']": set(), "unicodeEscaped['char']": {'HEX_DIGITS'}, "unicodeEscaped['Character']": set(), "isAscii['char']": set(), "isAsciiPrintable['char']": set(), "isAsciiControl['char']": set(), "isAsciiAlpha['char']": set(), "isAsciiAlphaUpper['char']": set(), "isAsciiAlphaLower['char']": set(), "isAsciiNumeric['char']": set(), "isAsciiAlphanumeric['char']": set(), "compare['char', 'char']": set(), 'CharUtils[]': set()}, 'RandomUtils': {'nextBoolean[]': set(), "nextBytes['int']": set(), 'nextDouble[]': set(), "nextDouble['double', 'double']": set(), 'nextFloat[]': set(), "nextFloat['float', 'float']": set(), 'nextInt[]': set(), "nextInt['int', 'int']": set(), 'nextLong[]': set(), "nextLong['long']": set(), "nextLong['long', 'long']": set(), 'random[]': set(), 'RandomUtils[]': set()}, 'RegExUtils': {"dotAll['String']": set(), "dotAllMatcher['String', 'String']": set(), "removeAll['String', 'Pattern']": set(), "removeAll['String', 'String']": set(), "removeFirst['String', 'Pattern']": set(), "removeFirst['String', 'String']": set(), "removePattern['String', 'String']": set(), "replaceAll['String', 'Pattern', 'String']": set(), "replaceAll['String', 'String', 'String']": set(), "replaceFirst['String', 'Pattern', 'String']": set(), "replaceFirst['String', 'String', 'String']": set(), "replacePattern['String', 'String', 'String']": set()}, 'AnnotationUtils': {"equals['Annotation', 'Annotation']": set(), "hashCode['Annotation']": set(), "toString['Annotation']": {'TO_STRING_STYLE'}, "isValidAnnotationMemberType['Class']": set(), "hashMember['String', 'Object']": set(), "memberEquals['Class', 'Object', 'Object']": set(), "arrayMemberEquals['Class', 'Object', 'Object']": set(), "annotationArrayMemberEquals['Annotation', 'Annotation']": set(), "arrayMemberHash['Class', 'Object']": set(), 'AnnotationUtils[]': set()}, 'BooleanUtils': {"and['boolean']": set(), "and['Boolean']": {'TRUE', 'FALSE'}, 'booleanValues[]': {'TRUE', 'FALSE'}, "compare['boolean', 'boolean']": set(), "forEach['Consumer']": set(), "isFalse['Boolean']": set(), "isNotFalse['Boolean']": set(), "isNotTrue['Boolean']": set(), "isTrue['Boolean']": set(), "negate['Boolean']": {'TRUE', 'FALSE'}, "oneHot['boolean']": set(), "oneHot['Boolean']": set(), "or['boolean']": set(), "or['Boolean']": {'TRUE', 'FALSE'}, 'primitiveValues[]': set(), "toBoolean['Boolean']": set(), "toBoolean['int']": set(), "toBoolean['int', 'int', 'int']": set(), "toBoolean['Integer', 'Integer', 'Integer']": set(), "toBoolean['String']": {'TRUE'}, "toBoolean['String', 'String', 'String']": set(), "toBooleanDefaultIfNull['Boolean', 'boolean']": set(), "toBooleanObject['int']": {'TRUE', 'FALSE'}, "toBooleanObject['int', 'int', 'int', 'int']": {'TRUE', 'FALSE'}, "toBooleanObject['Integer']": {'TRUE', 'FALSE'}, "toBooleanObject['Integer', 'Integer', 'Integer', 'Integer']": {'TRUE', 'FALSE'}, "toBooleanObject['String']": {'TRUE', 'FALSE'}, "toBooleanObject['String', 'String', 'String', 'String']": {'TRUE', 'FALSE'}, "toInteger['boolean']": set(), "toInteger['boolean', 'int', 'int']": set(), "toInteger['Boolean', 'int', 'int', 'int']": set(), "toIntegerObject['boolean']": set(), "toIntegerObject['boolean', 'Integer', 'Integer']": set(), "toIntegerObject['Boolean']": set(), "toIntegerObject['Boolean', 'Integer', 'Integer', 'Integer']": set(), "toString['boolean', 'String', 'String']": set(), "toString['Boolean', 'String', 'String', 'String']": set(), "toStringOnOff['boolean']": {'OFF', 'ON'}, "toStringOnOff['Boolean']": {'OFF', 'ON'}, "toStringTrueFalse['boolean']": {'TRUE', 'FALSE'}, "toStringTrueFalse['Boolean']": {'TRUE', 'FALSE'}, "toStringYesNo['boolean']": {'YES', 'NO'}, "toStringYesNo['Boolean']": {'YES', 'NO'}, 'values[]': {'BOOLEAN_LIST'}, "xor['boolean']": set(), "xor['Boolean']": {'TRUE', 'FALSE'}, 'BooleanUtils[]': set()}, 'ClassPathUtils': {"packageToPath['String']": set(), "pathToPackage['String']": set(), "toFullyQualifiedName['Class', 'String']": set(), "toFullyQualifiedName['Package', 'String']": set(), "toFullyQualifiedPath['Class', 'String']": set(), "toFullyQualifiedPath['Package', 'String']": set(), 'ClassPathUtils[]': set()}, 'EnumUtils': {"asEnum['Class']": {'S_DOES_NOT_SEEM_TO_BE_AN_ENUM_TYPE', 'ENUM_CLASS_MUST_BE_DEFINED'}, "checkBitVectorable['Class']": {'CANNOT_STORE_S_S_VALUES_IN_S_BITS'}, "generateBitVector['Class', 'E']": set(), "generateBitVector['Class', 'Iterable']": {'NULL_ELEMENTS_NOT_PERMITTED'}, "generateBitVectors['Class', 'E']": set(), "generateBitVectors['Class', 'Iterable']": {'NULL_ELEMENTS_NOT_PERMITTED'}, "getEnum['Class', 'String']": set(), "getEnum['Class', 'String', 'E']": set(), "getEnumIgnoreCase['Class', 'String']": set(), "getEnumIgnoreCase['Class', 'String', 'E']": set(), "getEnumList['Class']": set(), "getEnumMap['Class']": set(), "getEnumMap['Class', 'Function']": set(), "getEnumSystemProperty['Class', 'String', 'E']": set(), "getFirstEnumIgnoreCase['Class', 'String', 'Function', 'E']": set(), "isValidEnum['Class', 'String']": set(), "isValidEnumIgnoreCase['Class', 'String']": set(), "processBitVector['Class', 'long']": set(), "processBitVectors['Class', 'long']": set(), 'EnumUtils[]': set()}, 'CharSetUtils': {"containsAny['String', 'String']": set(), "count['String', 'String']": set(), "deepEmpty['String']": set(), "delete['String', 'String']": set(), "keep['String', 'String']": set(), "modify['String', 'String', 'boolean']": set(), "squeeze['String', 'String']": set(), 'CharSetUtils[]': set()}}
    assert expected == collectAccessMapFromPath(test_input_path)